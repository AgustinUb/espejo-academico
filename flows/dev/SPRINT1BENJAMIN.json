{
  "name": "HU1 - RecepciÃ³n de formulario online (END-TO-END)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "08963488-3c17-42a5-a4bb-23923e61e2c4",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "55fba977-95ad-4f9e-9bf2-9dec44915bbc",
      "name": "Webhook",
      "webhookId": "08963488-3c17-42a5-a4bb-23923e61e2c4"
    },
    {
      "parameters": {
        "jsCode": "/**\n * HU2 - Normalización y validación de datos\n * Responsable: Ítalo [cite: 155]\n * Nodo esperado: CTRL_NormalizePayload [cite: 179]\n * * Objetivo: Limpiar, validar y estandarizar el payload antes de la comparación. [cite: 157, 160]\n * * Criterios clave:\n * - Falta nombre/email -> Error controlado. [cite: 175, 176]\n * - Pregunta omitida -> \"NO_RESPONDIDA\". [cite: 177]\n */\n\n// 1. Inicialización\nconst outputItems = [];\nconst items = $input.all();\n\nfor (const item of items) {\n    // 1.1 Acceso al Payload (asumiendo que viene de un Webhook)\n    const rawData = item.json.body || item.json || {}; // Intenta acceder a .body (común en webhooks) o al item.json directo.\n    \n    // 2. Normalización de Variables (Sanitización y limpieza)\n    // Se asegura de que nombre y email sean strings limpios.\n    const nombre = String(rawData.alumno_nombre || '').trim();\n    const email = String(rawData.alumno_email || '').trim();\n    \n    // 3. Normalización del Array de Respuestas\n    // Asegura que 'respuestas' sea un array.\n    let respuestas = Array.isArray(rawData.respuestas) ? rawData.respuestas : [];\n    \n    // 4. VALIDACIÓN DE CRITERIOS\n    \n    // Criterio 1: Validar datos básicos (nombre, email, al menos una respuesta). [cite: 175]\n    if (!nombre || !email || respuestas.length === 0) {\n        // Criterio de Aceptación: Formulario vacío -> alerta y descarte. \n        console.error(`[CTRL_NormalizePayload] ERROR: Payload vacío o incompleto. Descartando. Nombre: ${nombre}, Email: ${email}, Respuestas: ${respuestas.length}`);\n        \n        // Registrar error pero continuar con el siguiente item (si existiera).\n        // Se puede añadir un nodo LOG después del Code para registrar este error.\n        \n    } else {\n        \n        // 5. NORMALIZACIÓN DE PREGUNTAS (Para asegurar la consistencia) [cite: 157]\n        const respuestasNormalizadas = respuestas.map(res => {\n            const preguntaId = String(res.pregunta_id || '').trim();\n            let marcada = String(res.marcada || '').toUpperCase().trim();\n\n            // Criterio 2: Preguntas vacías se marcan \"NO_RESPONDIDA\". [cite: 161, 177]\n            if (marcada === '') {\n                marcada = 'NO_RESPONDIDA';\n            }\n\n            return {\n                pregunta_id: preguntaId,\n                marcada: marcada\n            };\n        });\n\n        // 6. Generación de la Salida Esperada [cite: 162]\n        outputItems.push({\n            json: {\n                alumno_nombre: nombre,\n                alumno_email: email,\n                respuestas: respuestasNormalizadas\n            }\n        });\n    }\n}\n\n// Retornar los ítems limpios para pasar a HU3.\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "1d03b91b-8e35-43dc-b6cb-a80487e75a8e",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b9dce052-b549-47c7-a41f-9e371e6d8a48",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "52020e6536055f243037850b7155c5ca78e4c5d54c959e9719011ec893924076"
  },
  "id": "d8LcZzYFxNoESdT5",
  "tags": []
}